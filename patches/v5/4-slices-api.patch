diff --git a/packages/gatsby/cache-dir/gatsby-browser-entry.js b/packages/gatsby/cache-dir/gatsby-browser-entry.js
index c2bfd3e2b7..65218f2784 100644
--- a/packages/gatsby/cache-dir/gatsby-browser-entry.js
+++ b/packages/gatsby/cache-dir/gatsby-browser-entry.js
@@ -23,4 +23,5 @@ export {
 
 export { graphql, prefetchPathname }
 export { StaticQuery, StaticQueryContext, useStaticQuery } from "./static-query"
+export { Slice } from "./slice"
 export * from "gatsby-script"
diff --git a/packages/gatsby/index.d.ts b/packages/gatsby/index.d.ts
index 57c92929c1..c3dea75e6b 100644
--- a/packages/gatsby/index.d.ts
+++ b/packages/gatsby/index.d.ts
@@ -182,6 +182,47 @@ export type HeadFC<DataType = object, PageContextType = object> = (
   props: HeadProps<DataType, PageContextType>
 ) => JSX.Element
 
+type SerializableProps =
+  | ISerializableObject
+  | Array<SerializableProps>
+  | string
+  | number
+  | boolean
+  | null
+  | undefined
+
+interface ISerializableObject {
+  [key: string]: SerializableProps
+}
+
+/**
+ * A props object for [slice placholder](https://v5.gatsbyjs.com/docs/reference/built-in-components/gatsby-slice/)
+ */
+export interface SlicePlaceholderProps {
+  alias: string
+  allowEmpty?: boolean
+  children?: React.ReactNode
+  [key: string]: SerializableProps
+}
+
+/**
+ * Component used as a slice placholder, to mark a place in the page where a [slice](https://v5.gatsbyjs.com/docs/reference/built-in-components/gatsby-slice/) should be inserted.
+ */
+export declare function Slice(props: SlicePlaceholderProps): JSX.Element
+
+/**
+ * A props object for [slice component](https://v5.gatsbyjs.com/docs/reference/built-in-components/gatsby-slice/)
+ */
+export type SliceComponentProps<
+  DataType = object,
+  SliceContextType = object,
+  AdditionalSerializableProps extends ISerializableObject = object
+> = {
+  data: DataType
+  sliceContext: SliceContextType
+  children?: React.ReactNode
+} & AdditionalSerializableProps
+
 /**
  * Props object passed into the [getServerData](https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/) function.
  */
@@ -1227,6 +1268,14 @@ export interface Actions {
     option?: ActionOptions
   ): void
 
+  /** @see https://www.gatsbyjs.com/docs/reference/config-files/actions/#createSlice */
+  createSlice<TContext = Record<string, unknown>>(
+    this: void,
+    args: SliceInput<TContext>,
+    plugin?: ActionPlugin,
+    option?: ActionOptions
+  ): void
+
   /** @see https://www.gatsbyjs.com/docs/actions/#deleteNode */
   deleteNode(node: NodeInput, plugin?: ActionPlugin): void
 
@@ -1662,6 +1711,13 @@ export interface Page<TContext = Record<string, unknown>> {
   context?: TContext
   ownerNodeId?: string
   defer?: boolean
+  slices?: Record<string, string>
+}
+
+export interface SliceInput<TContext = Record<string, unknown>> {
+  id: string
+  component: string
+  context?: TContext
 }
 
 export interface IPluginRefObject {
diff --git a/packages/gatsby/src/redux/actions/restricted.ts b/packages/gatsby/src/redux/actions/restricted.ts
index cb105dfa6d..0ee5d3eda7 100644
--- a/packages/gatsby/src/redux/actions/restricted.ts
+++ b/packages/gatsby/src/redux/actions/restricted.ts
@@ -1,4 +1,6 @@
-import { camelCase } from "lodash"
+import camelCase from "lodash/camelCase"
+import isEqual from "lodash/isEqual"
+
 import { GraphQLSchema, GraphQLOutputType } from "graphql"
 import { ActionCreator } from "redux"
 import { ThunkAction } from "redux-thunk"
@@ -19,7 +21,12 @@ import {
   IPrintTypeDefinitions,
   ICreateResolverContext,
   IGatsbyPluginContext,
+  ICreateSliceAction,
 } from "../types"
+import { generateComponentChunkName } from "../../utils/js-chunk-names"
+import { store } from "../index"
+import normalizePath from "normalize-path"
+import { trackFeatureIsUsed } from "gatsby-telemetry"
 
 type RestrictionActionNames =
   | "createFieldExtension"
@@ -27,6 +34,7 @@ type RestrictionActionNames =
   | "createResolverContext"
   | "addThirdPartySchema"
   | "printTypeDefinitions"
+  | "createSlice"
 
 type SomeActionCreator =
   | ActionCreator<ActionsUnion>
@@ -420,6 +428,74 @@ export const actions = {
         })
       }
     },
+
+  createSlice: (
+    payload: {
+      id: string
+      component: string
+      context: Record<string, unknown>
+    },
+    plugin: IGatsbyPlugin,
+    traceId?: string
+  ): ICreateSliceAction => {
+    if (_CFLAGS_.GATSBY_MAJOR === `5` && process.env.GATSBY_SLICES) {
+      let name = `The plugin "${plugin.name}"`
+      if (plugin.name === `default-site-plugin`) {
+        name = `Your site's "gatsby-node.js"`
+      }
+
+      if (!payload.id) {
+        const message = `${name} must set the page path when creating a slice`
+        report.panic({
+          id: `11334`,
+          context: {
+            pluginName: name,
+            sliceObject: payload,
+            message,
+          },
+        })
+      }
+      if (!payload.component) {
+        report.panic({
+          id: `11333`,
+          context: {
+            pluginName: name,
+            sliceObject: payload,
+          },
+        })
+      }
+
+      trackFeatureIsUsed(`SliceAPI`)
+      const componentPath = normalizePath(payload.component)
+
+      const oldSlice = store.getState().slices.get(payload.id)
+      const contextModified =
+        !!oldSlice && !isEqual(oldSlice.context, payload.context)
+      const componentModified =
+        !!oldSlice && !isEqual(oldSlice.componentPath, componentPath)
+
+      return {
+        type: `CREATE_SLICE`,
+        plugin,
+        payload: {
+          componentChunkName: generateComponentChunkName(
+            payload.component,
+            `slice`
+          ),
+          componentPath,
+          // note: we use "name" internally instead of id
+          name: payload.id,
+          context: payload.context || {},
+          updatedAt: Date.now(),
+        },
+        traceId,
+        componentModified,
+        contextModified,
+      }
+    } else {
+      throw new Error(`createSlice is only available in Gatsby v5`)
+    }
+  },
 }
 
 const withDeprecationWarning =
@@ -540,4 +616,7 @@ export const availableActionsByAPI = mapAvailableActionsToAPIs({
   printTypeDefinitions: {
     [ALLOWED_IN]: [`createSchemaCustomization`],
   },
+  createSlice: {
+    [ALLOWED_IN]: [`createPages`],
+  },
 })
