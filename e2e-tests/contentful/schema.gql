### Type definitions saved at 2021-06-10T16:02:04.333Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["ContentfulText"]) @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

interface ContentfulReference implements Node {
  id: ID!
  sys: ContentfulSys
}

type ContentfulSys {
  type: String!
  id: String!
  spaceId: String!
  environmentId: String!
  contentType: ContentfulContentType @link(by: "id", from: "contentType___NODE")
  firstPublishedAt: Date!
  publishedAt: Date!
  publishedVersion: Int!
  locale: String!
}

type ContentfulContentType implements Node @dontInfer {
  name: String!
  displayField: String!
  description: String!
}

interface ContentfulEntry implements Node {
  id: ID!
  sys: ContentfulSys
}

type ContentfulAsset implements ContentfulReference & Node @dontInfer {
  sys: ContentfulSys
  title: String
  description: String
  contentType: String
  fileName: String
  url: String
  size: Int
  width: Int
  height: Int
}

type ContentfulRichTextAssets {
  block: [ContentfulAsset]!
  hyperlink: [ContentfulAsset]!
}

type ContentfulRichTextEntries {
  inline: [ContentfulEntry]!
  block: [ContentfulEntry]!
  hyperlink: [ContentfulEntry]!
}

type ContentfulRichTextLinks {
  assets: ContentfulRichTextAssets
  entries: ContentfulRichTextEntries
}

type ContentfulRichText @dontInfer {
  json: JSON
  links: ContentfulRichTextLinks
}

type ContentfulLocation @dontInfer {
  lat: Float!
  lon: Float!
}

type ContentfulText implements Node @dontInfer {
  raw: String!
}

type ContentfulContentTypeNumber implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  integer: Int
  integerLocalized: Int
  decimal: Float
  decimalLocalized: Float
}

type ContentfulContentTypeText implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  short: String
  shortLocalized: String
  shortList: [String]
  shortListLocalized: [String]
  longPlain: ContentfulText @link(by: "id", from: "longPlain___NODE")
  longMarkdown: ContentfulText @link(by: "id", from: "longMarkdown___NODE")
  longLocalized: ContentfulText @link(by: "id", from: "longLocalized___NODE")
}

type ContentfulContentTypeMediaReference implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  one: ContentfulAsset @link(by: "id", from: "one___NODE")
  oneLocalized: ContentfulAsset @link(by: "id", from: "oneLocalized___NODE")
  many: [ContentfulAsset] @link(by: "id", from: "many___NODE")
  manyLocalized: [ContentfulAsset] @link(by: "id", from: "manyLocalized___NODE")
}

type ContentfulContentTypeBoolean implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  boolean: Boolean
  booleanLocalized: Boolean
}

type ContentfulContentTypeDate implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  date: Date @dateformat
  dateTime: Date @dateformat
  dateTimeTimezone: Date @dateformat
  dateLocalized: Date @dateformat
}

type ContentfulContentTypeLocation implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  location: ContentfulLocation
  locationLocalized: ContentfulLocation
}

type ContentfulContentTypeJson implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  json: JSON
  jsonLocalized: JSON
}

type ContentfulContentTypeRichText implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  richText: ContentfulRichText
  richTextLocalized: ContentfulRichText
  richTextValidated: ContentfulRichText
}

type ContentfulContentTypeContentReference implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  one: ContentfulEntry @link(by: "id", from: "one___NODE")
  oneLocalized: ContentfulEntry @link(by: "id", from: "oneLocalized___NODE")
  many: [ContentfulEntry] @link(by: "id", from: "many___NODE")
  manyLocalized: [ContentfulEntry] @link(by: "id", from: "manyLocalized___NODE")
}

type ContentfulContentTypeValidatedContentReference implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  sys: ContentfulSys
  title: String
  oneItemSingleType: ContentfulEntry @link(by: "id", from: "oneItemSingleType___NODE")
  oneItemManyTypes: ContentfulEntry @link(by: "id", from: "oneItemManyTypes___NODE")
  oneItemAllTypes: ContentfulEntry @link(by: "id", from: "oneItemAllTypes___NODE")
  multipleItemsSingleType: [ContentfulEntry] @link(by: "id", from: "multipleItemsSingleType___NODE")
  multipleItemsManyTypes: [ContentfulEntry] @link(by: "id", from: "multipleItemsManyTypes___NODE")
  multipleItemsAllTypes: [ContentfulEntry] @link(by: "id", from: "multipleItemsAllTypes___NODE")
}

type ContentfulContentTypeContentType implements Node @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeContentTypeSys
}

type ContentfulContentTypeContentTypeSys {
  type: String
  id: String
  locale: String
  spaceId: String
  environmentId: String
  firstPublishedAt: Date @dateformat
  publishedAt: Date @dateformat
  publishedVersion: Int
}